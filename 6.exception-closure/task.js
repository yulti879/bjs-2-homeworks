/* Задача 1. Форматтер чисел
Ваши коллеги разработали форму, которая принимает от пользователя количество покупаемых единиц товара.
Вас попросили написать функцию-преобразователь, которая:
возвращает число, если всё корректно;
генерирует ошибку, если ввод не является числом в десятичной системе счисления.*/

function parseCount(value) {
    let result = Number.parseFloat(value);
    if (Number.isNaN(result)) {
        throw new Error('Невалидное значение');
    };
    return result;
};

function validateCount(value) {
    try {
        return parseCount(value);
    } catch(error) {
    return error
    };    
};

/*Вася решил создать онлайн-калькулятор геометрических фигур.
Помогите ему создать калькулятор треугольников, который сможет проверять существование треугольника,
считать площадь и периметр.

Напишите класс Triangle.
Конструктор класса должен принимать три стороны треугольника.
В случае нарушения правила существования треугольника (сумма двух сторон меньше третьей) выбрасывайте исключение
с ошибкой «Треугольник с такими сторонами не существует».

Геттер perimeter должен возвращать периметр треугольника.

Геттер area должен возвращать площадь треугольника. Для подсчёта площади используйте формулу Герона.
Точность должна вычисляться с обозначением до трёх знаков после запятой.

Напишите функцию getTriangle.
Аргументами функции являются три значения длин сторон.
Попытайтесь вернуть новый объект треугольника.
В случае перехвата исключения возвращайте объект с двумя геттерами area и perimeter, которые возвращают строку: «Ошибка! Треугольник не существует».*/

class Triangle {
    constructor(x, y, z) {
        this.a = x;
        this.b = y;
        this.c = z;
        if (x + y < z || x + z < y || y + z < x) {
        throw new Error('Треугольник с такими сторонами не существует');
        };
    };
    get perimeter() {
        return this.a + this.b + this.c;
    };
    get area() {
        let p = this.perimeter / 2;
        return Number(Math.sqrt((p * (p - this.a) * (p - this.b) * (p - this.c))).toFixed(3));
    };
};

function getTriangle(a, b, c) {
    try {
        return new Triangle(a, b, c);
    } catch(error) {
        return {
            get perimeter() {
                return 'Ошибка! Треугольник не существует';
            },
            get area() {
                return 'Ошибка! Треугольник не существует';
            }
        };       
    };
};